
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE ieee.std_logic_unsigned.ALL;
USE std.textio.ALL;
USE std.env.finish;

ENTITY random_tb IS
END random_tb;

ARCHITECTURE randomtb OF random_tb IS
	CONSTANT CLOCK_PERIOD : TIME := 100 ns;
	SIGNAL tb_done : STD_LOGIC;
	SIGNAL mem_address : STD_LOGIC_VECTOR (15 DOWNTO 0) := (OTHERS => '0');
	SIGNAL tb_rst : STD_LOGIC := '0';
	SIGNAL tb_start : STD_LOGIC := '0';
	SIGNAL tb_clk : STD_LOGIC := '0';
	SIGNAL mem_o_data, mem_i_data : STD_LOGIC_VECTOR (7 DOWNTO 0);
	SIGNAL enable_wire : STD_LOGIC;
	SIGNAL mem_we : STD_LOGIC;
	SIGNAL tb_z0, tb_z1, tb_z2, tb_z3 : STD_LOGIC_VECTOR (7 DOWNTO 0);
	SIGNAL tb_w : STD_LOGIC;

	CONSTANT SCENARIOLENGTH : INTEGER := 4071;
	CONSTANT N_EVENTS : INTEGER := 100;
	SIGNAL scenario_rst : unsigned(0 TO SCENARIOLENGTH - 1)		
	SIGNAL scenario_start : unsigned(0 TO SCENARIOLENGTH - 1)	
	SIGNAL scenario_w : unsigned(0 TO SCENARIOLENGTH - 1)		

	TYPE registers IS ARRAY (0 TO N_EVENTS - 1, 0 TO 3) OF INTEGER;
	SIGNAL registers_check : registers := (
		(0,105,0,0),(0,166,0,0),(0,166,0,217),(123,166,0,217),(123,166,130,217),(123,56,130,217),(0,0,0,100),(0,151,0,100),(0,93,0,100),(0,93,0,221),(0,222,0,221),(0,222,0,200),(0,191,0,200),(238,0,0,0),(238,0,12,0),(238,0,159,0),(238,0,159,231),(238,0,159,224),(220,0,159,224),(220,0,189,224),(220,0,189,152),(0,245,0,0),(0,0,86,0),(0,121,86,0),(0,223,0,0),(47,223,0,0),(47,223,0,122),(215,223,0,122),(26,223,0,122),(228,223,0,122),(218,223,0,122),(218,239,0,122),(97,239,0,122),(97,239,90,122),(97,46,90,122),(97,46,216,122),(97,46,244,122),(97,46,184,122),(97,46,147,122),(97,220,147,122),(186,220,147,122),(186,197,147,122),(186,197,147,165),(186,197,189,165),(0,0,0,14),(0,0,0,152),(236,0,0,152),(236,38,0,152),(0,0,0,210),(0,0,241,210),(0,0,1,210),(0,57,1,210),(0,57,1,53),(192,57,1,53),(192,57,185,53),(156,57,185,53),(162,57,185,53),(0,0,0,0),(138,0,0,0),(138,0,0,123),(138,243,0,123),(138,111,0,123),(138,111,47,123),(138,111,75,123),(138,111,175,123),(251,111,175,123),(0,0,168,0),(0,232,168,0),(0,232,168,181),(0,232,24,181),(0,239,24,181),(0,174,24,181),(0,0,0,208),(0,0,30,208),(0,0,219,208),(53,0,219,208),(194,0,219,208),(194,242,219,208),(91,242,219,208),(145,242,219,208),(65,242,219,208),(65,242,163,208),(65,242,78,208),(65,242,180,208),(65,249,180,208),(65,249,205,208),(0,0,0,40),(0,0,125,40),(0,0,210,40),(0,0,37,40),(0,0,130,40),(0,0,130,122),(0,213,130,122),(0,213,130,15),(0,68,130,15),(0,68,130,205),(0,68,220,205),(246,68,220,205),(246,68,22,205),(246,68,192,205)
	);

	SIGNAL do_reset : std_logic_vector(0 TO N_EVENTS - 1) := "1000001000000100000001101000000000000000000010001000000001000000001000001000000000000010000000000000";

	TYPE ram_type IS ARRAY (65535 DOWNTO 0) OF STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL RAM : ram_type := (
		241 => STD_LOGIC_VECTOR(to_unsigned(130,8)),
		310 => STD_LOGIC_VECTOR(to_unsigned(220,8)),
		1420 => STD_LOGIC_VECTOR(to_unsigned(111,8)),
		1614 => STD_LOGIC_VECTOR(to_unsigned(222,8)),
		3036 => STD_LOGIC_VECTOR(to_unsigned(184,8)),
		3252 => STD_LOGIC_VECTOR(to_unsigned(12,8)),
		3914 => STD_LOGIC_VECTOR(to_unsigned(57,8)),
		4417 => STD_LOGIC_VECTOR(to_unsigned(100,8)),
		4659 => STD_LOGIC_VECTOR(to_unsigned(147,8)),
		6047 => STD_LOGIC_VECTOR(to_unsigned(191,8)),
		6125 => STD_LOGIC_VECTOR(to_unsigned(221,8)),
		6405 => STD_LOGIC_VECTOR(to_unsigned(97,8)),
		6558 => STD_LOGIC_VECTOR(to_unsigned(159,8)),
		6724 => STD_LOGIC_VECTOR(to_unsigned(189,8)),
		6726 => STD_LOGIC_VECTOR(to_unsigned(22,8)),
		7804 => STD_LOGIC_VECTOR(to_unsigned(180,8)),
		8633 => STD_LOGIC_VECTOR(to_unsigned(40,8)),
		8680 => STD_LOGIC_VECTOR(to_unsigned(243,8)),
		9211 => STD_LOGIC_VECTOR(to_unsigned(86,8)),
		9825 => STD_LOGIC_VECTOR(to_unsigned(216,8)),
		10261 => STD_LOGIC_VECTOR(to_unsigned(251,8)),
		12186 => STD_LOGIC_VECTOR(to_unsigned(192,8)),
		13855 => STD_LOGIC_VECTOR(to_unsigned(47,8)),
		14019 => STD_LOGIC_VECTOR(to_unsigned(53,8)),
		14917 => STD_LOGIC_VECTOR(to_unsigned(0,8)),
		15675 => STD_LOGIC_VECTOR(to_unsigned(14,8)),
		16884 => STD_LOGIC_VECTOR(to_unsigned(145,8)),
		17218 => STD_LOGIC_VECTOR(to_unsigned(38,8)),
		17767 => STD_LOGIC_VECTOR(to_unsigned(26,8)),
		18134 => STD_LOGIC_VECTOR(to_unsigned(68,8)),
		18675 => STD_LOGIC_VECTOR(to_unsigned(194,8)),
		19053 => STD_LOGIC_VECTOR(to_unsigned(130,8)),
		19211 => STD_LOGIC_VECTOR(to_unsigned(175,8)),
		19638 => STD_LOGIC_VECTOR(to_unsigned(91,8)),
		19831 => STD_LOGIC_VECTOR(to_unsigned(220,8)),
		20258 => STD_LOGIC_VECTOR(to_unsigned(239,8)),
		21828 => STD_LOGIC_VECTOR(to_unsigned(246,8)),
		23320 => STD_LOGIC_VECTOR(to_unsigned(238,8)),
		26748 => STD_LOGIC_VECTOR(to_unsigned(236,8)),
		26774 => STD_LOGIC_VECTOR(to_unsigned(192,8)),
		26841 => STD_LOGIC_VECTOR(to_unsigned(105,8)),
		27568 => STD_LOGIC_VECTOR(to_unsigned(244,8)),
		28302 => STD_LOGIC_VECTOR(to_unsigned(122,8)),
		29338 => STD_LOGIC_VECTOR(to_unsigned(53,8)),
		29404 => STD_LOGIC_VECTOR(to_unsigned(185,8)),
		30453 => STD_LOGIC_VECTOR(to_unsigned(166,8)),
		30542 => STD_LOGIC_VECTOR(to_unsigned(165,8)),
		31419 => STD_LOGIC_VECTOR(to_unsigned(245,8)),
		31982 => STD_LOGIC_VECTOR(to_unsigned(217,8)),
		32661 => STD_LOGIC_VECTOR(to_unsigned(123,8)),
		32944 => STD_LOGIC_VECTOR(to_unsigned(205,8)),
		33713 => STD_LOGIC_VECTOR(to_unsigned(78,8)),
		33884 => STD_LOGIC_VECTOR(to_unsigned(47,8)),
		34196 => STD_LOGIC_VECTOR(to_unsigned(218,8)),
		35309 => STD_LOGIC_VECTOR(to_unsigned(138,8)),
		35367 => STD_LOGIC_VECTOR(to_unsigned(122,8)),
		35580 => STD_LOGIC_VECTOR(to_unsigned(239,8)),
		35849 => STD_LOGIC_VECTOR(to_unsigned(186,8)),
		35974 => STD_LOGIC_VECTOR(to_unsigned(174,8)),
		36628 => STD_LOGIC_VECTOR(to_unsigned(219,8)),
		37079 => STD_LOGIC_VECTOR(to_unsigned(241,8)),
		37098 => STD_LOGIC_VECTOR(to_unsigned(1,8)),
		37824 => STD_LOGIC_VECTOR(to_unsigned(168,8)),
		38364 => STD_LOGIC_VECTOR(to_unsigned(163,8)),
		38800 => STD_LOGIC_VECTOR(to_unsigned(215,8)),
		38854 => STD_LOGIC_VECTOR(to_unsigned(75,8)),
		41215 => STD_LOGIC_VECTOR(to_unsigned(200,8)),
		41702 => STD_LOGIC_VECTOR(to_unsigned(210,8)),
		43187 => STD_LOGIC_VECTOR(to_unsigned(205,8)),
		43337 => STD_LOGIC_VECTOR(to_unsigned(46,8)),
		43740 => STD_LOGIC_VECTOR(to_unsigned(125,8)),
		44251 => STD_LOGIC_VECTOR(to_unsigned(208,8)),
		44282 => STD_LOGIC_VECTOR(to_unsigned(210,8)),
		44885 => STD_LOGIC_VECTOR(to_unsigned(93,8)),
		45903 => STD_LOGIC_VECTOR(to_unsigned(56,8)),
		46627 => STD_LOGIC_VECTOR(to_unsigned(228,8)),
		47339 => STD_LOGIC_VECTOR(to_unsigned(197,8)),
		47462 => STD_LOGIC_VECTOR(to_unsigned(181,8)),
		48262 => STD_LOGIC_VECTOR(to_unsigned(213,8)),
		48354 => STD_LOGIC_VECTOR(to_unsigned(162,8)),
		48716 => STD_LOGIC_VECTOR(to_unsigned(90,8)),
		53941 => STD_LOGIC_VECTOR(to_unsigned(37,8)),
		55941 => STD_LOGIC_VECTOR(to_unsigned(231,8)),
		56139 => STD_LOGIC_VECTOR(to_unsigned(242,8)),
		56541 => STD_LOGIC_VECTOR(to_unsigned(151,8)),
		57071 => STD_LOGIC_VECTOR(to_unsigned(152,8)),
		57410 => STD_LOGIC_VECTOR(to_unsigned(65,8)),
		58531 => STD_LOGIC_VECTOR(to_unsigned(152,8)),
		58624 => STD_LOGIC_VECTOR(to_unsigned(232,8)),
		58656 => STD_LOGIC_VECTOR(to_unsigned(189,8)),
		58942 => STD_LOGIC_VECTOR(to_unsigned(121,8)),
		59680 => STD_LOGIC_VECTOR(to_unsigned(223,8)),
		60126 => STD_LOGIC_VECTOR(to_unsigned(156,8)),
		61912 => STD_LOGIC_VECTOR(to_unsigned(30,8)),
		62564 => STD_LOGIC_VECTOR(to_unsigned(24,8)),
		63127 => STD_LOGIC_VECTOR(to_unsigned(249,8)),
		63228 => STD_LOGIC_VECTOR(to_unsigned(15,8)),
		64565 => STD_LOGIC_VECTOR(to_unsigned(220,8)),
		65097 => STD_LOGIC_VECTOR(to_unsigned(224,8)),
		65193 => STD_LOGIC_VECTOR(to_unsigned(123,8)),
		others => (others => '0')
	);

	COMPONENT project_reti_logiche IS
		PORT (
			i_clk : IN STD_LOGIC;
			i_rst : IN STD_LOGIC;
			i_start : IN STD_LOGIC;
			i_w : IN STD_LOGIC;

			o_z0 : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			o_z1 : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			o_z2 : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			o_z3 : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			o_done : OUT STD_LOGIC;

			o_mem_addr : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
			i_mem_data : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
			o_mem_we : OUT STD_LOGIC;
			o_mem_en : OUT STD_LOGIC
		);
	END COMPONENT project_reti_logiche;

BEGIN
	UUT : project_reti_logiche
	PORT MAP(
		i_clk => tb_clk,
		i_start => tb_start,
		i_rst => tb_rst,
		i_w => tb_w,

		o_z0 => tb_z0,
		o_z1 => tb_z1,
		o_z2 => tb_z2,
		o_z3 => tb_z3,
		o_done => tb_done,

		o_mem_addr => mem_address,
		o_mem_en => enable_wire,
		o_mem_we => mem_we,
		i_mem_data => mem_o_data
	);


	-- Process for the clock generation
	CLK_GEN : PROCESS IS
	BEGIN
		WAIT FOR CLOCK_PERIOD/2;
		tb_clk <= NOT tb_clk;
	END PROCESS CLK_GEN;


	-- Process related to the memory
	MEM : PROCESS (tb_clk)
	BEGIN
		IF tb_clk'event AND tb_clk = '1' THEN
			IF enable_wire = '1' THEN
				IF mem_we = '1' THEN
					RAM(conv_integer(mem_address)) <= mem_i_data;
					mem_o_data <= mem_i_data AFTER 1 ns;
				ELSE
					mem_o_data <= RAM(conv_integer(mem_address)) AFTER 1 ns;
				END IF;
			END IF;
		END IF;
	END PROCESS;

	-- This process provides the correct scenario on the signal controlled by the TB
	createScenario : PROCESS (tb_clk)
	BEGIN
		IF tb_clk'event AND tb_clk = '0' THEN
			tb_rst <= scenario_rst(0);
			tb_w <= scenario_w(0);
			tb_start <= scenario_start(0);
			scenario_rst <= scenario_rst(1 TO SCENARIOLENGTH - 1) & '0';
			scenario_w <= scenario_w(1 TO SCENARIOLENGTH - 1) & '0';
			scenario_start <= scenario_start(1 TO SCENARIOLENGTH - 1) & '0';
		END IF;
	END PROCESS;

	-- Process without sensitivity list designed to test the actual component.
	testRoutine : PROCESS IS
	BEGIN
		FOR i IN 0 TO N_EVENTS - 1 LOOP
			mem_i_data <= "00000000";
			IF do_reset(i) = '1' THEN
				WAIT UNTIL tb_rst = '1';
				WAIT UNTIL tb_rst = '0';
				ASSERT tb_z0 = "00000000" REPORT "TEST FALLITO (postreset Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z0))) severity failure;
				ASSERT tb_z1 = "00000000" REPORT "TEST FALLITO (postreset Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z1))) severity failure;
				ASSERT tb_z2 = "00000000" REPORT "TEST FALLITO (postreset Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z2))) severity failure;
				ASSERT tb_z3 = "00000000" REPORT "TEST FALLITO (postreset Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z2))) severity failure;
				ASSERT tb_done = '0' REPORT "TEST FALLITO (postreset done != 0 )" severity failure;
				ASSERT enable_wire = '0' REPORT "TEST FALLITO (postreset enable_wire != 0 )" severity warning;
				ASSERT mem_we = '0' REPORT "(mem_we != 0 )" severity failure;
			END IF;

			WAIT UNTIL tb_start = '1';
			ASSERT tb_z0 = "00000000" REPORT "TEST FALLITO (poststart Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z0))) severity failure;
			ASSERT tb_z1 = "00000000" REPORT "TEST FALLITO (poststart Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z1))) severity failure;
			ASSERT tb_z2 = "00000000" REPORT "TEST FALLITO (poststart Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z2))) severity failure;
			ASSERT tb_z3 = "00000000" REPORT "TEST FALLITO (poststart Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z3))) severity failure;
			ASSERT tb_done = '0' REPORT "TEST FALLITO (poststart done != 0 )" severity failure;
			ASSERT enable_wire = '0' REPORT "TEST FALLITO (poststart enable_wire != 0 )" severity warning;
			ASSERT mem_we = '0' REPORT "(mem_we != 0 )" severity failure;
			WAIT UNTIL tb_done = '1';
			--WAIT UNTIL rising_edge(tb_clk);
			WAIT FOR CLOCK_PERIOD/2;
			ASSERT tb_z0 = std_logic_vector(to_unsigned(registers_check(i, 0), 8))	REPORT "TEST FALLITO (Z0 ---) found " & integer'image(to_integer(unsigned(tb_z0))) & " Expected " & integer'image(registers_check(i, 0)) severity failure;
			ASSERT tb_z1 = std_logic_vector(to_unsigned(registers_check(i, 1), 8))	REPORT "TEST FALLITO (Z1 ---) found " & integer'image(to_integer(unsigned(tb_z1))) & " Expected " & integer'image(registers_check(i, 1)) severity failure;
			ASSERT tb_z2 = std_logic_vector(to_unsigned(registers_check(i, 2), 8))	REPORT "TEST FALLITO (Z2 ---) found " & integer'image(to_integer(unsigned(tb_z2))) & " Expected " & integer'image(registers_check(i, 2)) severity failure;
			ASSERT tb_z3 = std_logic_vector(to_unsigned(registers_check(i, 3), 8))	REPORT "TEST FALLITO (Z3 ---) found " & integer'image(to_integer(unsigned(tb_z3))) & " Expected " & integer'image(registers_check(i, 3)) severity failure;
			ASSERT tb_done = '1' REPORT "TEST FALLITO (done = 0 )" severity failure;
			WAIT FOR CLOCK_PERIOD/2 + 10 ns;
			ASSERT tb_z0 = "00000000" REPORT "TEST FALLITO (postdone Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z0))) severity failure;
			ASSERT tb_z1 = "00000000" REPORT "TEST FALLITO (postdone Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z1))) severity failure;
			ASSERT tb_z2 = "00000000" REPORT "TEST FALLITO (postdone Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z2))) severity failure;
			ASSERT tb_z3 = "00000000" REPORT "TEST FALLITO (postdone Z0--Z3 != 0 ) found " & integer'image(to_integer(unsigned(tb_z3))) severity failure;
			ASSERT tb_done = '0' REPORT "TEST FALLITO (postdone done != 0 )" severity failure;
			ASSERT enable_wire = '0' REPORT "(postdone enable_wire != 0 )" severity warning;
			ASSERT mem_we = '0' REPORT "TEST FALLITO (mem_we != 0 )" severity failure;
		END LOOP;
		wait FOR CLOCK_PERIOD * 2;
		REPORT "SUCCESS";
		finish;
	END PROCESS testRoutine;

END randomtb;

